<#include "/common/utils.ftl">
<#assign bpm_flag=false>
<#list columns as po>
<#if po.fieldDbName=='act_status'>
  <#assign bpm_flag=true>
</#if>
</#list>
<#if bpm_flag>
<template>
  <div class="form-main">
      <a-card :body-style="{padding: '24px 32px'}" :bordered="false">
        <a-form @submit="handleSubmit" :form="form">
          <a-row>
<#assign pidFieldName = "">
<#assign form_cat_tree = false>
<#assign form_cat_back = "">
<#list columns as po>
<#if po.isShow =='Y'>
<#assign form_field_dictCode="">
	<#if po.dictTable?default("")?trim?length gt 1 && po.dictText?default("")?trim?length gt 1 && po.dictField?default("")?trim?length gt 1>
		<#assign form_field_dictCode="${po.dictTable},${po.dictText},${po.dictField}">
	<#elseif po.dictField?default("")?trim?length gt 1>
		<#assign form_field_dictCode="${po.dictField}">
	</#if>
        <a-form-item label="${po.filedComment}" :labelCol="labelCol" :wrapperCol="wrapperCol">
	<#if po.fieldDbName == tableVo.extendParams.pidField>
		<#assign pidFieldName = po.fieldName>
          <j-tree-select :disabled="disabled"
            ref="treeSelect"
            placeholder="请选择${po.filedComment}"
            v-decorator="['${po.fieldName}'${autoWriteRules(po)}]"
            dict="${tableVo.tableName},${tableVo.extendParams.textField},id"
            pidField="${tableVo.extendParams.pidField}"
            pidValue="0"
            hasChildField="${tableVo.extendParams.hasChildren}"
            <#if po.readonly=='Y'>disabled</#if>>
          </j-tree-select>
	<#elseif po.classType =='date'>
          <j-date :disabled="disabled" placeholder="请选择${po.filedComment}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='datetime'>
          <j-date :disabled="disabled" placeholder="请选择${po.filedComment}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" :show-time="true" date-format="YYYY-MM-DD HH:mm:ss" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='time'>
          <j-time :disabled="disabled" placeholder="请选择${po.filedComment}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='switch'>
          <j-switch :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" <#if po.dictField?default("")?trim?length gt 1>:options="${po.dictField}"</#if>></j-switch>
	<#elseif po.classType =='popup'>
          <j-popup :disabled="disabled"
            v-decorator="['${po.fieldName}'${autoWriteRules(po)}]"
            :trigger-change="true"
            org-fields="${po.dictField}"
            dest-fields="${Format.underlineToHump(po.dictText)}"
            code="${po.dictTable}"
            @callback="popupCallback"
            <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='sel_depart'>
          <j-select-depart :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='sel_user'>
          <j-select-user-by-dep :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='textarea'>
          <a-textarea :disabled="disabled" v-decorator="[${autoStringSuffix(po)}${autoWriteRules(po)}]" rows="4" placeholder="请输入${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='list' || po.classType=='radio'>
          <j-dict-select-tag :disabled="disabled" type="${po.classType}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" dictCode="${form_field_dictCode}" placeholder="请选择${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='list_multi' || po.classType=='checkbox'>
          <j-multi-select-tag :disabled="disabled" type="${po.classType}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" dictCode="${form_field_dictCode}" placeholder="请选择${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.fieldDbType=='int' || po.fieldDbType=='double' || po.fieldDbType=='BigDecimal'>
          <a-input-number :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" placeholder="请输入${po.filedComment}" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='file'>
          <j-upload :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" <#if po.readonly=='Y'>disabled</#if> <#if po.uploadnum??>:number=${po.uploadnum}</#if>></j-upload>
	<#elseif po.classType=='image'>
          <j-image-upload :disabled="disabled" isMultiple <#if po.uploadnum??>:number=${po.uploadnum}</#if> v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" <#if po.readonly=='Y'>disabled</#if>></j-image-upload>
  <#elseif po.classType=='sel_search'>
          <j-search-select-tag :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" dict="${form_field_dictCode}" <#if po.readonly=='Y'>disabled</#if> />
	<#elseif po.classType=='cat_tree'>
      <#assign form_cat_tree = true>
          <j-category-select :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" pcode="${po.dictField?default("")}" placeholder="请选择${po.filedComment}" <#if po.dictText?default("")?trim?length gt 1>back="${po.dictText}" @change="handleCategoryChange"</#if> <#if po.readonly=='Y'>disabled</#if>/>
      <#if po.dictText?default("")?trim?length gt 1>
      <#assign form_cat_back = "${po.dictText}">
      </#if>
  <#elseif po.classType =='pca'>
          <j-area-linkage :disabled="disabled" type="cascader" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" placeholder="请输入省市区" <#if po.readonly=='Y'>disabled</#if> />
	<#elseif po.classType=='umeditor'>
          <j-editor :disabled="disabled" v-decorator="[${autoStringSuffix(po)},{trigger:'input'}]" <#if po.readonly=='Y'>disabled</#if>/>
  <#elseif po.classType =='markdown'>
          <j-markdown-editor :disabled="disabled" v-decorator="[${autoStringSuffix(po)},{initialValue:''}]" id="${po.fieldName}"></j-markdown-editor>
	<#elseif po.classType == 'sel_tree'>
	          <j-tree-select :disabled="disabled"
              ref="treeSelect"
              placeholder="请选择${po.filedComment}"
              v-decorator="['${po.fieldName}'${autoWriteRules(po)}]"
              <#if po.dictText??>
              <#if po.dictText?split(',')[2]?? && po.dictText?split(',')[0]??>
              dict="${po.dictTable},${po.dictText?split(',')[2]},${po.dictText?split(',')[0]}"
              <#elseif po.dictText?split(',')[1]??>
              pidField="${po.dictText?split(',')[1]}"
              <#elseif po.dictText?split(',')[3]??>
              hasChildField="${po.dictText?split(',')[3]}"
              </#if>
              </#if>
              pidValue="${po.dictField}"
              <#if po.readonly=='Y'>disabled</#if>>
            </j-tree-select>
	<#else>
          <a-input :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" placeholder="请输入${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>></a-input>
    </#if>
        </a-form-item>
        <#if form_cat_tree && form_cat_back?length gt 1>
        <a-form-item v-show="false">
          <a-input :disabled="disabled" v-decorator="['${form_cat_back}']"></a-input>
        </a-form-item>
        </#if>
</#if>
</#list>    
        </a-row>
      <a-form-item v-if="!disabled"
                           :wrapperCol="{ span: 24 }"
                           style="text-align: center"
              >
                <a-button type="primary" :disabled="disabled||btndisabled" @click="handleSubmit">保存</a-button>
                <a-button style="margin-left: 8px" :disabled="disabled" @click="close">取消</a-button>
              </a-form-item>
              <a-form-item v-if="task"
                           :wrapperCol="{ span: 24 }"
                           style="text-align: center"
              >
                <a-button type="primary"  @click="passTask">通过</a-button>
                <a-button style="margin-left: 8px"  @click="backTask">驳回</a-button>
              </a-form-item>
            </a-form>
          </a-card>
        </div>
</template>

<script>

  import { httpAction,getAction,postFormAction } from '@/api/manage'
  import pick from 'lodash.pick'
  import { validateDuplicateValue } from '@/utils/util'
  export default {
    name: "${entityName}ActModal",
    components: { 
    },
    props: {
      //表单禁用
      disabled: {
        type: Boolean,
        default: false,
        required: false
      },
      processData:{
        type:Object,
        default:()=>{return {}},
        required:false
      },
      /*是否新增*/
      isNew: {type: Boolean, default: false, required: false},
      /*是否处理流程*/
      task: {type: Boolean, default: false, required: false}
    },
    data () {
      return {
        model: {},
        form: this.$form.createForm(this),
        labelCol: {
          xs: { span: 24 },
          sm: { span: 5 },
        },
        wrapperCol: {
          xs: { span: 24 },
          sm: { span: 16 },
        },

        confirmLoading: false,
        <#include "/common/validatorRulesTemplate/main.ftl">
        url: {
          add: "/${entityPackage}/${entityName?uncap_first}/add",
          edit: "/${entityPackage}/${entityName?uncap_first}/edit",
          getForm:'/actBusiness/getForm',
          addApply:'/actBusiness/add',
          editForm:'/actBusiness/editForm',
        },
        expandedRowKeys:[],
        pidField:"${pidFieldName}",
        /*表单回显数据*/
        data:{},
        btndisabled: false
     
      }
    },
    created () {
      if (!this.isNew){
        this.init();
      }
    },
    methods: {
      /*回显数据*/
      init(){
        this.btndisabled = true;
        var r = this.processData;
        getAction(this.url.getForm,{
          tableId:r.tableId,
          tableName:r.tableName,
        }).then((res)=>{
          if (res.success){
            let formData = res.result;
            formData.tableName = r.tableName;
            this.data = formData;
            console.log("表单回显数据",this.data)
            this.form.resetFields();
            this.model = Object.assign({}, this.data);
            this.$nextTick(() => {
              this.form.setFieldsValue(pick(this.data<#list columns as po><#if po.fieldName !='id'><#if po.fieldDbType=='Blob'>,'${po.fieldName}String'<#else>,'${po.fieldName}'</#if></#if></#list>))
            });
            this.btndisabled = false;
          }else {
            this.$message.error(res.message)
          }
        })
      },
      handleSubmit () {
        const that = this;
        // 触发表单验证
        this.form.validateFields((err, values) => {
          if (!err) {
            that.confirmLoading = true;
            let httpurl = '';
            let method = '';
            if(!this.model.id){
              httpurl+=this.url.add;
              method = 'post';
            }else{
              httpurl+=this.url.edit;
               method = 'put';
            }
            let old_pid = this.model[this.pidField]
            let formData = Object.assign(this.model, values);
            let new_pid = this.model[this.pidField]
            if(this.model.id && this.model.id === new_pid){
              that.$message.warning("父级节点不能选择自己");
              that.confirmLoading = false;
              return;
            }
            if (formData.pid !== undefined) {
              that.$message.warning("该流程对应表为树类型，请不要从该页面提交子节点数据");
              that.confirmLoading = false;
              return;
            }
            console.log("表单提交数据",formData)
            httpAction(httpurl,formData,method).then((res)=>{
              if(res.success){
                that.$message.success(res.message);
                this.$emit('afterSubmit',formData)
              }else{
                that.$message.warning(res.message);
              }
            }).finally(() => {
              that.confirmLoading = false;
              that.close();
            })
          }
         
        })
      },
      close() {
        //todo 关闭后的回调
        this.$emit('close')
      },
      /*通过审批*/
      passTask() {
        this.$emit('passTask')
      },
      /*驳回审批*/
      backTask() {
        this.$emit('backTask')
      },
      popupCallback(row){
        this.form.setFieldsValue(pick(row<#list columns as po><#if po.fieldName !='id'>,${autoStringSuffix(po)}</#if></#list>))
      },
      
      
    }
  }
</script>
</#if>