<#include "/common/utils.ftl">
<#assign bpm_flag=false>
<#list columns as po>
<#if po.fieldDbName=='act_status'>
  <#assign bpm_flag=true>
</#if>
</#list>
<#if bpm_flag>
<template>
  <div class="form-main">
      <a-card :body-style="{padding: '24px 32px'}" :bordered="false">
        <!-- 主表单区域 -->
        <a-form @submit="handleSubmit" :form="form">
        <a-row>
<#assign form_cat_tree = false>
<#assign form_cat_back = "">
<#assign form_span = 24>
<#list columns as po>
<#if po.isShow =='Y' && po.fieldName != 'id'>
<#assign form_field_dictCode="">
  <#if po.dictTable?default("")?trim?length gt 1 && po.dictText?default("")?trim?length gt 1 && po.dictField?default("")?trim?length gt 1>
		<#assign form_field_dictCode="${po.dictTable},${po.dictText},${po.dictField}">
	<#elseif po.dictField?default("")?trim?length gt 1>
		<#assign form_field_dictCode="${po.dictField}">
	</#if>
	<#if po.classType =='textarea'>
          <a-col :span="24">
            <a-form-item label="${po.filedComment}" :labelCol="labelCol2" :wrapperCol="wrapperCol2">
	<#else>
          <a-col :xs="24" :sm="12">
            <a-form-item label="${po.filedComment}" :labelCol="labelCol" :wrapperCol="wrapperCol">
	</#if>
	<#if po.classType =='date'>
              <j-date :disabled="disabled" placeholder="请选择${po.filedComment}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='datetime'>
              <j-date :disabled="disabled" placeholder="请选择${po.filedComment}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" :show-time="true" date-format="YYYY-MM-DD HH:mm:ss" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='time'>
              <j-time :disabled="disabled" placeholder="请选择${po.filedComment}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='popup'>
              <j-popup :disabled="disabled"
                v-decorator="['${po.fieldName}'${autoWriteRules(po)}]"
                :trigger-change="true"
                org-fields="${po.dictField}"
                dest-fields="${Format.underlineToHump(po.dictText)}"
                code="${po.dictTable}"
                @callback="popupCallback"
                <#if po.readonly=='Y'>disabled</#if>/>
    <#elseif po.classType =='sel_depart'>
              <j-select-depart :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" multi <#if po.readonly=='Y'>disabled</#if>/>
<#elseif po.classType =='switch'>
              <j-switch :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" <#if po.dictField?default("")?trim?length gt 1>:options="${po.dictField}"</#if> <#if po.readonly=='Y'>disabled</#if>></j-switch>
	<#elseif po.classType =='pca'>
		      <j-area-linkage :disabled="disabled" type="cascader" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" placeholder="请输入省市区" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='markdown'>
	          <j-markdown-editor :disabled="disabled" v-decorator="[${autoStringSuffix(po)},{initialValue:''}]" id="${po.fieldName}"></j-markdown-editor>
    <#elseif po.classType =='password'>
	          <a-input-password :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" placeholder="请输入${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='sel_user'>
              <j-select-user-by-dep :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType =='textarea'>
              <a-textarea :disabled="disabled" v-decorator="[${autoStringSuffix(po)}${autoWriteRules(po)}]" rows="4" placeholder="请输入${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='list' || po.classType=='radio'>
              <j-dict-select-tag :disabled="disabled" type="${po.classType}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" dictCode="${form_field_dictCode}" placeholder="请选择${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='list_multi' || po.classType=='checkbox'>
              <j-multi-select-tag :disabled="disabled" type="${po.classType}" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" dictCode="${form_field_dictCode}" placeholder="请选择${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='sel_search'>
              <j-search-select-tag :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" dict="${form_field_dictCode}" <#if po.readonly=='Y'>disabled</#if>/>
    <#elseif po.classType=='cat_tree'>
    	<#assign form_cat_tree = true>
              <j-category-select :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" pcode="${po.dictField?default("")}" placeholder="请选择${po.filedComment}" <#if po.dictText?default("")?trim?length gt 1>back="${po.dictText}" @change="handleCategoryChange"</#if> <#if po.readonly=='Y'>disabled</#if>/>
    	<#if po.dictText?default("")?trim?length gt 1>
    	<#assign form_cat_back = "${po.dictText}">
    	</#if>
	<#elseif po.fieldDbType=='int' || po.fieldDbType=='double' || po.fieldDbType=='BigDecimal'>
              <a-input-number :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" placeholder="请输入${po.filedComment}" style="width: 100%" <#if po.readonly=='Y'>disabled</#if>/>
	<#elseif po.classType=='file'>
              <j-upload :disabled="disabled" v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" :trigger-change="true" <#if po.readonly=='Y'>disabled</#if> <#if po.uploadnum??>:number=${po.uploadnum}</#if>></j-upload>
	<#elseif po.classType=='image'>
              <j-image-upload :disabled="disabled" isMultiple <#if po.uploadnum??>:number=${po.uploadnum}</#if> v-decorator="['${po.fieldName}'${autoWriteRules(po)}]" <#if po.readonly=='Y'>disabled</#if>></j-image-upload>
	<#elseif po.classType=='umeditor'>
              <j-editor :disabled="disabled" v-decorator="[${autoStringSuffix(po)},{trigger:'input'}]" <#if po.readonly=='Y'>disabled</#if>/>
		<#elseif po.classType == 'sel_tree'>
  	          <j-tree-select :disabled="disabled"
                ref="treeSelect"
                placeholder="请选择${po.filedComment}"
                v-decorator="['${po.fieldName}'${autoWriteRules(po)}]"
                <#if po.dictText??>
                <#if po.dictText?split(',')[2]?? && po.dictText?split(',')[0]??>
                dict="${po.dictTable},${po.dictText?split(',')[2]},${po.dictText?split(',')[0]}"
                <#elseif po.dictText?split(',')[1]??>
                pidField="${po.dictText?split(',')[1]}"
                <#elseif po.dictText?split(',')[3]??>
                hasChildField="${po.dictText?split(',')[3]}"
                </#if>
                </#if>
                pidValue="${po.dictField}"
                <#if po.readonly=='Y'>disabled</#if>>
              </j-tree-select>
	<#else>
              <a-input :disabled="disabled" v-decorator="[${autoStringSuffix(po)}${autoWriteRules(po)}]" placeholder="请输入${po.filedComment}" <#if po.readonly=='Y'>disabled</#if>></a-input>
    </#if>
            </a-form-item>
            <#if form_cat_tree && form_cat_back?length gt 1>
            <a-form-item v-show="false">
              <a-input :disabled="disabled" v-decorator="['${form_cat_back}']"></a-input>
            </a-form-item>
            </#if>
          </a-col>
</#if>
</#list>

        </a-row>
      </a-form>

      <!-- 子表单区域 -->
      <a-tabs v-model="activeKey" @change="handleChangeTabs">
<#list subTables as sub><#rt/>
  <#if sub.foreignRelationType =='1'>
        <a-tab-pane tab="${sub.ftlDescription}" :key="refKeys[${sub_index}]" :forceRender="true">
          <${Format.humpToShortbar(sub.entityName)}-form ref="${sub.entityName?uncap_first}Form" @validateError="validateError" :disabled="disabled"></${Format.humpToShortbar(sub.entityName)}-form>
        </a-tab-pane>
      
  <#else>
        <a-tab-pane tab="${sub.ftlDescription}" :key="refKeys[${sub_index}]" :forceRender="true">
          <j-editable-table
            :disabled="disabled"
            :ref="refKeys[${sub_index}]"
            :loading="${sub.entityName?uncap_first}Table.loading"
            :columns="${sub.entityName?uncap_first}Table.columns"
            :dataSource="${sub.entityName?uncap_first}Table.dataSource"
            :maxHeight="300"
            :rowNumber="true"
            :rowSelection="true"
            :actionButton="true"/>
        </a-tab-pane>
        
  </#if>
</#list>
      </a-tabs>

      <a-form-item v-if="!disabled"
                   :wrapperCol="{ span: 24 }"
                   style="text-align: center"
      >
        <a-button type="primary" :disabled="disabled||btndisabled" @click="handleSubmit">保存</a-button>
        <a-button style="margin-left: 8px" :disabled="disabled" @click="close">取消</a-button>
      </a-form-item>
      <a-form-item v-if="task"
                   :wrapperCol="{ span: 24 }"
                   style="text-align: center"
      >
        <a-button type="primary"  @click="passTask">通过</a-button>
        <a-button style="margin-left: 8px"  @click="backTask">驳回</a-button>
      </a-form-item>

    </a-card>
  </div>
</template>

<script>

  import pick from 'lodash.pick'
  import { VALIDATE_NO_PASSED, FormTypes,getRefPromise, validateFormAndTables } from '@/utils/JEditableTableUtil'
  import { validateDuplicateValue } from '@/utils/util'
  <#list subTables as sub>
  <#if sub.foreignRelationType =='1'>
  import ${sub.entityName}Form from './${sub.entityName}Form.vue'
  </#if>
  </#list>
  import { httpAction, getAction,postFormAction } from "@/api/manage"

  export default {
    name: '${entityName}ActModal',
    components: {
    <#list subTables as sub>
    <#if sub.foreignRelationType =='1'>
    ${sub.entityName}Form,
    </#if>
    </#list>
    },
    props: {
      //表单禁用
      disabled: {
        type: Boolean,
        default: false,
        required: false
      },
      processData:{
        type:Object,
        default:()=>{return {}},
        required:false
      },
      /*是否新增*/
      isNew: {type: Boolean, default: false, required: false},
      /*是否处理流程*/
      task: {type: Boolean, default: false, required: false}
    },
    data() {
      return {
        model: {},
        form: this.$form.createForm(this),
        labelCol: {
          xs: { span: 24 },
          sm: { span: 6 },
        },
        wrapperCol: {
          xs: { span: 24 },
          sm: { span: 16 },
        },
        labelCol2: {
          xs: { span: 24 },
          sm: { span: 3 },
        },
        wrapperCol2: {
          xs: { span: 24 },
          sm: { span: 20 },
        },
        // 新增时子表默认添加几行空数据
        addDefaultRowNum: 1,
        <#include "/common/validatorRulesTemplate/main.ftl">
        refKeys: [<#list subTables as sub>'${sub.entityName?uncap_first}', </#list>],
        tableKeys:[<#list subTables as sub><#if sub.foreignRelationType =='0'>'${sub.entityName?uncap_first}', </#if></#list>],
        activeKey: '${subTables[0].entityName?uncap_first}',
<#list subTables as sub><#rt/>
        // ${sub.ftlDescription}
        ${sub.entityName?uncap_first}Table: {
          loading: false,
          dataSource: [],
          columns: [
<#if sub.foreignRelationType =='0'>
<#assign popupBackFields = "">

<#-- 循环子表的列 开始 -->
<#list sub.colums as col><#rt/>
<#if col.isShow =='Y'>
    <#if col.filedComment !='外键' >
            {
              title: '${col.filedComment}',
              key: ${autoStringSuffix(col)},
      <#if col.classType =='date'>
              type: FormTypes.date,
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif col.classType =='datetime'>
              type: FormTypes.datetime,
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif "int,decimal,double,"?contains(col.classType)>
              type: FormTypes.inputNumber,
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif col.classType =='list' || col.classType =='radio'>
              type: FormTypes.select,
              <#if col.dictTable?default("")?trim?length gt 1>
              dictCode:"${col.dictTable},${col.dictText},${col.dictField}",
              <#else>
              dictCode:"${col.dictField}",
              </#if>
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif col.classType =='list_multi' || col.classType =='checkbox'>
              type: FormTypes.list_multi,
              <#if col.dictTable?default("")?trim?length gt 1>
              dictCode:"${col.dictTable},${col.dictText},${col.dictField}",
              <#else>
              dictCode:"${col.dictField}",
              </#if>
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif col.classType =='switch'>
              type: FormTypes.checkbox,
              <#if col.dictField?default("")?trim?length gt 1>
              customValue:${col.dictField},
              <#else>
              customValue: ['Y', 'N'],
              </#if>
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif col.classType =='sel_search'>
              type: FormTypes.sel_search,
              <#if col.dictTable?default("")?trim?length gt 1>
              dictCode:"${col.dictTable},${col.dictText},${col.dictField}",
              <#else>
              dictCode:"${col.dictField}",
              </#if>
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#elseif col.classType =='image'>
              type: FormTypes.image,
              token:true,
              responseName:"message",
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
              <#if col.uploadnum??>
              number: ${col.uploadnum},
              </#if>
      <#elseif col.classType =='file'>
              type: FormTypes.file,
              token:true,
              responseName:"message",
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
              <#if col.uploadnum??>
              number: ${col.uploadnum},
              </#if>
      <#elseif col.classType =='popup'>
        <#if popupBackFields?length gt 0>
            <#assign popupBackFields = "${popupBackFields}"+","+"${col.dictText}">
        <#else>
            <#assign popupBackFields = "${col.dictText}">
        </#if>
              type: FormTypes.popup,
              popupCode:"${col.dictTable}",
              destFields:"${col.dictText}",
              orgFields:"${col.dictField}",
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      <#else>
              type: FormTypes.input,
              <#if col.readonly=='Y'>
              disabled:true,
              </#if>
      </#if>
      <#if col.classType =='list_multi' || col.classType =='checkbox'>
              width:"250px",
      <#else>
              width:"200px",
      </#if>
      <#if col.classType =='file'>
              placeholder: '请选择文件',
      <#else>
              placeholder: '请输入${'$'}{title}',
      </#if>
      <#if col.defaultVal??>
        <#if col.fieldDbType=="BigDecimal" || col.fieldDbType=="double" || col.fieldDbType=="int">
              defaultValue:${col.defaultVal},
              <#else>
              defaultValue:"${col.defaultVal}",
        </#if>
      <#else>
              defaultValue:'',
      </#if>
      <#-- 子表的校验 -->
      <#assign subFieldValidType = col.fieldValidType!''>
      <#-- 非空校验 -->
      <#if col.nullable == 'N' || subFieldValidType == '*'>
              validateRules: [{ required: true, message: '${'$'}{title}不能为空' }],
      <#-- 其他情况下，只要有值就被认为是正则校验 -->
      <#elseif subFieldValidType?length gt 0>
        <#assign subMessage = '格式不正确'>
        <#if subFieldValidType == 'only' >
          <#assign subMessage = '不能重复'>
        </#if>
              validateRules: [{ pattern: "${subFieldValidType}", message: "${'$'}{title}${subMessage}" }],
      </#if>
            },
    </#if>
</#if>
</#list>
<#-- 循环子表的列 结束 -->

<#-- 处理popup的隐藏列 -->
<#if popupBackFields?length gt 0>
<#list popupBackFields?split(",") as item>
<#if item?length gt 0>
<#assign tempItemFlag = true>

<#list sub.colums as col>
<#if col.isShow =='Y' && col.fieldName == item>
<#assign tempItemFlag = false>
</#if>
</#list>
<#if tempItemFlag>
            {
              title: '${item}',
              key: '${item}',
              type:"hidden"
            },
</#if>
</#if>
</#list>
</#if>
</#if>
          ]
        },
</#list>
        url: {
          add: "/${entityPackage}/${entityName?uncap_first}/add",
          edit: "/${entityPackage}/${entityName?uncap_first}/edit",
<#list subTables as sub><#rt/>
          ${sub.entityName?uncap_first}: {
            list: '/${entityPackage}/${entityName?uncap_first}/query${sub.entityName}ByMainId'
          },
</#list>
          getForm:'/actBusiness/getForm',
          addApply:'/actBusiness/add',
          editForm:'/actBusiness/editForm',
          queryById: "${entityPackage}/${entityName?uncap_first}/queryById",
        },
        /*表单回显数据*/
        data:{},
        btndisabled: false
      }
    },
    created () {
      if (!this.isNew){
        this.init(this.processData);
      } else {
        this.show();
      }
    },
    methods: {
      handleSubmit (e) {
        this.handleOk(e);
      },
      close() {
        //todo 关闭后的回调
        this.$emit('close')
      },
      /*通过审批*/
      passTask() {
        this.$emit('passTask')
      },
      /*驳回审批*/
      backTask() {
        this.$emit('backTask')
      },
      getAllTable() {
        let values = this.tableKeys.map(key => getRefPromise(this, key))
        return Promise.all(values)
      },
      /** 遍历所有的JEditableTable实例 */
        eachAllTable(callback) {
          // 开始遍历
          this.getAllTable().then(tables => {
            tables.forEach((item, index) => {
              if (typeof callback === 'function') {
                callback(item, index)
              }
            })
          })
        },

        show() {
          this.$nextTick(() => {
            return new Promise((resolve) => {
              this.tableReset();
              resolve();
            }).then(() => {
              // 默认新增空数据
              let rowNum = this.addDefaultRowNum
              if (typeof rowNum !== 'number') {
                rowNum = 1
                console.warn('由于你没有在 data 中定义 addDefaultRowNum 或 addDefaultRowNum 不是数字，所以默认添加一条空数据，如果不想默认添加空数据，请将定义 addDefaultRowNum 为 0')
              }
              this.eachAllTable((item) => {
                item.add(rowNum)
              })
              if (typeof this.addAfter === 'function') this.addAfter(this.model)
              this.edit({})
            })
          })
        },
          edit(record) {
            if(record && '{}'!=JSON.stringify(record)){
              this.tableReset();
            }
            if (typeof this.editBefore === 'function') this.editBefore(record)
            this.visible = true
            this.activeKey = this.refKeys[0]
            this.form.resetFields()
            this.model = Object.assign({}, record)
            if (typeof this.editAfter === 'function') this.editAfter(this.model)
          },
          //清空子表table的数据
          tableReset(){
            this.eachAllTable((item) => {
              item.clearRow()
            })
          },
          /** 查询某个tab的数据 */
          requestSubTableData(url, params, tab, success) {
            tab.loading = true
            getAction(url, params).then(res => {
              let { result } = res
              let dataSource = []
              if (result) {
                if (Array.isArray(result)) {
                  dataSource = result
                } else if (Array.isArray(result.records)) {
                  dataSource = result.records
                }
              }
              tab.dataSource = dataSource
              typeof success === 'function' ? success(res) : ''
            }).finally(() => {
              tab.loading = false
            })
          },
          /** 发起请求，自动判断是执行新增还是修改操作 */
          request(formData) {
            let url = this.url.add, method = 'post'
            if (this.model.id) {
              url = this.url.edit
              method = 'put'
            }
            this.confirmLoading = true
            this.btndisabled = true;
            httpAction(url, formData, method).then((res) => {
              if (res.success) {
                this.$message.success(res.message)
                this.$emit('ok')
                this.close()
                this.$emit('afterSubmit',formData)
              } else {
                this.$message.warning(res.message)
              }
            }).finally(() => {
                this.btndisabled = false;
              this.confirmLoading = false
            })
          },

          /* --- handle 事件 --- */

          /** ATab 选项卡切换事件 */
          handleChangeTabs(key) {
            // 自动重置scrollTop状态，防止出现白屏
            getRefPromise(this, key).then(editableTable => {
              editableTable.resetScrollTop()
            })
          },
          /** 确定按钮点击事件 */
          handleOk(e) {
            e.preventDefault();
            /** 触发表单验证 */
            this.getAllTable().then(tables => {
              /** 一次性验证主表和所有的次表 */
              return validateFormAndTables(this.form, tables)
            }).then(allValues => {
              if (typeof this.classifyIntoFormData !== 'function') {
                throw this.throwNotFunction('classifyIntoFormData')
              }
              let formData = this.classifyIntoFormData(allValues);
              // 发起请求
              return this.request(formData);
            }).catch(e => {
              if (e.error === VALIDATE_NO_PASSED) {
                // 如果有未通过表单验证的子表，就自动跳转到它所在的tab
                this.activeKey = e.index == null ? this.activeKey : this.refKeys[e.index]
              } else {
                console.error(e)
              }
            })
          },

          /* --- throw --- */

          /** not a function */
          throwNotFunction(name) {
            return `<#noparse>${name}</#noparse> 未定义或不是一个函数`
          },

          /** not a array */
          throwNotArray(name) {
            return `<#noparse>${name}</#noparse> 未定义或不是一个数组`
          },
      /** 调用完edit()方法之后会自动调用此方法 */
      editAfter() {
        let fieldval = pick(this.model<#list columns as po><#if po.fieldName !='id'>,${autoStringSuffix(po)}</#if></#list>)
        this.$nextTick(() => {
          this.form.setFieldsValue(fieldval)
<#list subTables as sub><#rt/>
<#if sub.foreignRelationType =='1'>
          this.$refs.${sub.entityName?uncap_first}Form.initFormData(this.url.${sub.entityName?uncap_first}.list,this.model.id)
</#if>
</#list>         
        })
        // 加载子表数据
        if (this.model.id) {
          let params = { id: this.model.id }
<#list subTables as sub><#rt/>
<#if sub.foreignRelationType =='0'>
          this.requestSubTableData(this.url.${sub.entityName?uncap_first}.list, params, this.${sub.entityName?uncap_first}Table)
</#if>
</#list>
        }
      },
      /** 整理成formData */
      classifyIntoFormData(allValues) {
        let main = Object.assign(this.model, allValues.formValue)

        return {
          ...main, // 展开
<#assign subManyIndex = 0>
<#list subTables as sub><#rt/>
<#if sub.foreignRelationType =='0'>
          ${sub.entityName?uncap_first}List: allValues.tablesValue[${subManyIndex}].values,
<#assign subManyIndex = subManyIndex+1>
<#else>
          ${sub.entityName?uncap_first}List: this.$refs.${sub.entityName?uncap_first}Form.getFormData(),
</#if>
</#list>
        }
      },
      validateError(msg){
        this.$message.error(msg)
      },
     popupCallback(row){
       this.form.setFieldsValue(pick(row<#list columns as po><#if po.fieldName !='id'>,${autoStringSuffix(po)}</#if></#list>))
     },
     init(p) {
       getAction(this.url.queryById, {id:p.tableId}).then((res)=>{
         if(res.success){
           this.edit(res.result);
         }
       });
     },
   <#if form_cat_tree>
     handleCategoryChange(value,backObj){
       this.form.setFieldsValue(backObj)
      }
   </#if>
    }
  }
</script>

<style scoped>
</style>
</#if>